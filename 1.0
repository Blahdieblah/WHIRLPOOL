{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let d8 = 100000000

let poolId = base58'3PQHndCUVrv3wBuQjbvVP9SnGmfbfitGxfx' # = BURN-XTN x PepeTeam
let poolString = toBase58String(poolId)
let projectowner = base58'3PEtLVxDT8mxAh1SDAn8m7JTGNkdpkaFxBk'
let whirlpoolPoolId = base58'change' # = WHIRLPOOL AMM
let poolboostSC = base58'3PAeY7RgwuNUZNscGqahqJxFTFDkh7fbNwJ'

let whirlpool = base58'73tY3E6Gd5AWYmsuq8m8Kek7KnJNAYyS3GoveTbc6jCi'
let waves = base58'WAVES'
let usdterc = base58'9wc3LXNA4TEBsXyKtoLE9mrbDD7WMHXvXrCjZvabLAsi'
let usdcerc = base58'HGgabTqUS8WtVFUJzfmrTDMgEccJuZLBPhFgQFxvnsoW'
let usdtbsc = base58'A81p1LTRyoq2rDR2TNxB2dWYxsiNwCSSi8sXef2SEkwb'
let usdcbsc = base58'4BKKSp6NoNcrFHyorZogDyctq1fq6w7114Ym1pw6HUtC'
let burnxtnId = base58'3SjxA2YLdfF9fTRbzLm9xFn27C6MW34W1YsdJ6Axefns'
let eth = base58'3VuV5WTmDz47Dmdn3QpcYjzbSdipjQE4JMdNe1xZpX13'
let bnb = base58'66a1br3BrkoaJgP7yEar9hJcSTvJPoH6PYBLqscXcMGo'
let wbtc = base58'2Fge5HEBRD3XTeg7Xg3FW5yiB9HVJFQtMXiWMQo72Up6'
let btcb = base58'EW1uGLVo21Wd9i2Rhq8o4VKDTCQTGCGXE8DqayHGrLg8'

let wavesinpool = getIntegerValue(Address(poolId), ("global_" + toBase58String(waves)) + "_balance")
let projectstake = getIntegerValue(Address(poolId), ("3PAkmJniMgnnAej5pYf2jFYkCbZow5pt9tr" + "_indexStaked"))
let totalstake = getIntegerValue(Address(poolId), ("global_poolToken_amount"))
let tvlinwaves = fraction(wavesinpool * 10, projectstake, totalstake)

let whirlpoolsupply = match assetInfo(whirlpool) {
    case asset:Asset => asset.quantity
    case _ => throw("Can't find asset")
  } 
let price = if (fraction(tvlinwaves + getIntegerValue(this, "surplus received in wavelets"), d8, whirlpoolsupply) + d8) >= getIntegerValue(this, "WHIRLPOOL issue price in wavelets") 
then (fraction(tvlinwaves + getIntegerValue(this, "surplus received in wavelets"), d8, whirlpoolsupply) + d8)
else getIntegerValue(this, "WHIRLPOOL issue price in wavelets")

@Callable(i)
func buyWHIRLPOOLwithWAVES() = #if (i.caller != this && i.caller != Address(base58'3PPCzX2doZ7agBNuGSKqjrbdXgGEtE7CpQ3')) then throw("smart contract under maintenance") else
{ 
  let pmt = i.payments[0].value()
  let surplus = fraction((price - d8), pmt.amount, d8)
  let amount = fraction(pmt.amount, d8, price)
  let supplyamount = (pmt.amount - surplus)/3
  if (pmt.assetId != unit) then {
    throw("attach WAVES token only")
  } else {
        strict SupplyWavesMainPool = invoke(Address(base58'3P4uA5etnZi4AmBabKinq2bMiWU8KcnHZdH'), "supply", [], [AttachedPayment(unit, supplyamount)])
        strict SupplyWavesWavesDefiPool = invoke(Address(base58'3P4DK5VzDwL3vfc5ahUEhtoe5ByZNyacJ3X'), "supply", [], [AttachedPayment(unit, supplyamount)])
        strict SupplyWavesLowCap = invoke(Address(base58'3PHpuQUPVUoR3AYzFeJzeWJfYLsLTmWssVH'), "supply", [], [AttachedPayment(unit, supplyamount)])
    [Reissue(whirlpool, amount, true),
    ScriptTransfer(i.caller, amount, whirlpool),
    IntegerEntry("WHIRLPOOL issue price in wavelets", price),
    IntegerEntry("total WAVES received in wavelets", pmt.amount + getIntegerValue(this, "total WAVES received in wavelets")), 
    IntegerEntry("surplus received in wavelets", surplus + getIntegerValue(this, "surplus received in wavelets")),
    IntegerEntry("wavelets received for treasury", amount - surplus + getIntegerValue(this, "wavelets received for treasury"))]
  }
}

@Callable(i)
func PriceSurplusSupply() = 
{
  [IntegerEntry("WAVES in pool", wavesinpool),
  IntegerEntry("projectstake", projectstake),
  IntegerEntry("totalstake", totalstake),
  IntegerEntry("WHIRLPOOL issue price in wavelets", price),
  IntegerEntry("surplus treasury value in wavelets", tvlinwaves),
  IntegerEntry("WHIRLPOOL total supply", whirlpoolsupply),
  IntegerEntry("total WAVES received in wavelets", getIntegerValue(this, "total WAVES received in wavelets")),
  IntegerEntry("surplus received in wavelets", getIntegerValue(this, "surplus received in wavelets")),
  IntegerEntry("wavelets received for treasury", getIntegerValue(this, "wavelets received for treasury")),
  IntegerEntry("total WAVES paid out in wavelets", getIntegerValue(this, "total WAVES paid out in wavelets")),
  IntegerEntry("ROI basis points", getIntegerValue(this, "ROI basis points"))]
}

@Callable(i)
func PoolOneTokenSurplus() = if (i.caller != this) then throw("access only by project owner") else
{
let surplusamount = getIntegerValue(this, "surplus received in wavelets")
strict PoolOneTokenSurplus = invoke(Address(base58'3PR1Qvi9mHT35SwWEkLSqqE2L8thiPLdVWU'), "generateIndexWithOneTokenAndStake", [poolString],[AttachedPayment(unit, surplusamount)])
  [IntegerEntry("surplus received in wavelets", getIntegerValue(this, "surplus received in wavelets") - surplusamount)]
}

@Callable(i)
func BoostPoolAPY() = if (i.caller != this) then throw("access only by project owner") else
{
  strict wavesBalanceBefore = wavesBalance(this).available
  strict swapburnxtn = invoke(Address(poolId), "swap", ["waves",0], [AttachedPayment(burnxtnId,assetBalance(this, burnxtnId))])
  strict swapusdterc = invoke(Address(poolId), "swap", ["waves",0], [AttachedPayment(usdterc,assetBalance(this, usdterc))])
  strict swapusdtbsc = invoke(Address(poolId), "swap", ["waves",0], [AttachedPayment(usdtbsc,assetBalance(this, usdtbsc))])
  strict swapusdcerc = invoke(Address(poolId), "swap", ["waves",0], [AttachedPayment(usdcerc,assetBalance(this, usdcerc))])
  strict swapusdcbsc = invoke(Address(poolId), "swap", ["waves",0], [AttachedPayment(usdcbsc,assetBalance(this, usdcbsc))])
  strict swapeth = invoke(Address(poolId), "swap", ["waves",0], [AttachedPayment(eth,assetBalance(this, eth))])
  strict swapbnb = invoke(Address(poolId), "swap", ["waves",0], [AttachedPayment(bnb,assetBalance(this, bnb))])
  strict swapwbtc = invoke(Address(poolId), "swap", ["waves",0], [AttachedPayment(wbtc,assetBalance(this, wbtc))])
  strict swapbtcb = invoke(Address(poolId), "swap", ["waves",0], [AttachedPayment(btcb,assetBalance(this, btcb))])
  let wavesBalanceAfter = wavesBalance(this).available
  let wavesDifference = wavesBalanceAfter - wavesBalanceBefore
  let wavesAmountBoost = fraction(wavesDifference, 80, 100)
  let amountBoost = fraction(wavesDifference, 80, 100)
  let amountOwner = fraction(wavesDifference, 20, 100)
  strict boost = invoke(Address(poolboostSC), "addBoosting", [poolString,7], [AttachedPayment(waves, amountBoost)])
  [ScriptTransfer(Address(projectowner), amountOwner, waves),
  IntegerEntry("total WAVES paid out in wavelets", wavesAmountBoost + getIntegerValue(this, "total WAVES paid out in wavelets")),
  IntegerEntry("ROI basis points", fraction(getIntegerValue(this, "total WAVES paid out in wavelets"), 10000, getIntegerValue(this, "total WAVES received in wavelets")))]
}
