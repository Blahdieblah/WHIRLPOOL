{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}
{-# IMPORT artifacts/mainnet.ride #-}

let d8 = 100000000
let wxId = base58'Atqv59EYzjFGuitKVnMRk6H8FukjoV3ktPorbEys25on'
let unit0id = base58'GjwAHMjqWzYR4LgoNy91CxUKAGJN79h2hseZoae4nU8t'
let wavesdlpid = base58'HYogWffUjS8Uw4bYA1Dn3qrGmJerMqkf139aJcHhk8yq'

let invoker = Address(base58'3P1yEqCmumg3rJmuNA39HMav6UxknqtYkb9')
let hWhirlpool = Address(base58'3PAkmJniMgnnAej5pYf2jFYkCbZow5pt9tr')
let payBoost = Address(base58'3PEgVPqJ3NYWbRn1CLELUpuY9KCmragc7sY')

let unlockBlock = (60 * 1440)
let heirPubKey = base58'2kpmuzw1ZbrtgAN3BrR7vbEW1XrJoJKCstL7mf7XNf2P' # Ivash @Ivash_Yu

let unlockBlock2 = (90 * 1440)
let PuzzleMasterPubKey = base58'4z8CKSYQBKkzx7PBb5uBP1YPa6YAHRNTApW1sQVHT5eU' # Vladimir @vlzhr and Ania @aniallhvrdv Address: 3PLjwHcz9NEuaTo63NZR9B9okQiKQxZSbmf

let keyActivated = "Activated blockheight"
let kLeasingAmount = "leasing_amount"
let kLeasingId = "leasing_id"

@Callable(i)
func stakeUnstake(stake:Boolean, WAVES_amount:Int) =
if i.caller != this && i.caller != invoker then throw("no access") else
if (stake == true && wavesBalance(this).available <= d8) then [] else
{
    let pool = Address(base58'3PJvwxivuWv29LzU1DaEQLsMeXeUJqMAuMk')
    let leasingId = getBinary(this, kLeasingId)
    let leasingAmount = valueOrElse(getInteger(this, kLeasingAmount), 0)        
    let newLeaseAmount = if (stake)
        then (leasingAmount + wavesBalance(this).available - d8)
        else (leasingAmount - (WAVES_amount * d8))
    let newLease = Lease(pool, newLeaseAmount, 1)
    let newLeaseId = calculateLeaseId(newLease)
    let baseEntry = 
        [newLease, 
        BinaryEntry(kLeasingId, newLeaseId), 
        IntegerEntry(kLeasingAmount, 
        newLeaseAmount), 
        ScriptTransfer(hWhirlpool, assetBalance(this, unit0id), unit0id),
        ScriptTransfer(hWhirlpool, assetBalance(this, wavesdlpid), wavesdlpid),
        ScriptTransfer(hWhirlpool, assetBalance(this, wxId), wxId)]
        match leasingId {
        case lId: ByteVector => ([LeaseCancel(lId)] ++ baseEntry)
        case _ => baseEntry
        }
}

@Callable(i)
func deleteEntry(keyString:String) = 
if (i.caller != this) then throw("no access") else
{[DeleteEntry(keyString)]}

@Callable(i)
func activated() = 
if (i.caller != this && i.caller != payBoost) then throw("no access") else
{[IntegerEntry(keyActivated, height)]} 

@Verifier(tx)
func verify() =
{
  sigVerify_16Kb(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)

  || if (height < getIntegerValue(this, keyActivated) + unlockBlock) then false else
  sigVerify_16Kb(tx.bodyBytes, tx.proofs[0], heirPubKey)

  || if (height < getIntegerValue(this, keyActivated) + unlockBlock2) then false else
  sigVerify_16Kb(tx.bodyBytes, tx.proofs[0], PuzzleMasterPubKey)
}
