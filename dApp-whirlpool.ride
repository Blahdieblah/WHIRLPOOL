{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let d8 = 100000000
let d16 = (d8 * d8)

let poolId = base58'3PQHndCUVrv3wBuQjbvVP9SnGmfbfitGxfx' # = BURN-XTN x PepeTeam
let poolString = toBase58String(poolId)
let projectowner = base58'3PEtLVxDT8mxAh1SDAn8m7JTGNkdpkaFxBk'
let whirlpoolPoolId = base58'3P2myTbd5zpEHcYmNpdWTp5gXS5B8tL1RCY'
let whirlpoolstring = toBase58String(whirlpoolPoolId)
let poolboostSC = base58'3PAeY7RgwuNUZNscGqahqJxFTFDkh7fbNwJ'
let project = base58'3PAkmJniMgnnAej5pYf2jFYkCbZow5pt9tr'

let whirlpool = base58'73tY3E6Gd5AWYmsuq8m8Kek7KnJNAYyS3GoveTbc6jCi'
let waves = base58'WAVES'
let usdterc = base58'9wc3LXNA4TEBsXyKtoLE9mrbDD7WMHXvXrCjZvabLAsi'
let usdcerc = base58'HGgabTqUS8WtVFUJzfmrTDMgEccJuZLBPhFgQFxvnsoW'
let usdtbsc = base58'A81p1LTRyoq2rDR2TNxB2dWYxsiNwCSSi8sXef2SEkwb'
let usdcbsc = base58'4BKKSp6NoNcrFHyorZogDyctq1fq6w7114Ym1pw6HUtC'
let burnxtnId = base58'3SjxA2YLdfF9fTRbzLm9xFn27C6MW34W1YsdJ6Axefns'
let eth = base58'3VuV5WTmDz47Dmdn3QpcYjzbSdipjQE4JMdNe1xZpX13'
let bnb = base58'66a1br3BrkoaJgP7yEar9hJcSTvJPoH6PYBLqscXcMGo'
let wbtc = base58'2Fge5HEBRD3XTeg7Xg3FW5yiB9HVJFQtMXiWMQo72Up6'
let btcb = base58'EW1uGLVo21Wd9i2Rhq8o4VKDTCQTGCGXE8DqayHGrLg8'
let east = base58'6phK22ztGBW127gUFmdMEHKB3CVd6ZhWox2WtwJkbqTq'
let steast = base58'GAB8JowY9UANZ4TQy2TzJyhxjPqXX3DUrb2cdMWrrJus'
let swaves = base58'YiNbofFzC17jEHHCMwrRcpy9MrrjabMMLZxg8g5xmf7'

func tryGetInteger (key:String) = match getInteger(this, key) {
    case b: Int => 
        b
    case _ => 
        0
}

let PL_Main = Address(base58'3P4uA5etnZi4AmBabKinq2bMiWU8KcnHZdH')
let PL_Defi = Address(base58'3P4DK5VzDwL3vfc5ahUEhtoe5ByZNyacJ3X')
let PL_Low = Address(base58'3PHpuQUPVUoR3AYzFeJzeWJfYLsLTmWssVH')
let EAST_stake = Address(base58'3P2hbtheN5apNppqqUK7L7qAwmRFXy91CNa')
let WX_WAVES_EAST = Address(base58'3PJVwjfi2fF5Jv9AauayU6xLxrYBn8bpGH1')
let SWAVES_stake = Address(base58'3PDPzZVLhN1EuzGy4xAxjjTVkawKDLEaHiV')

let address = toString(Address(project))
func PL_value(dAppAddress:Address, asset:ByteVector)=
{
  fraction(getIntegerValue(dAppAddress, (address + "_supplied_" + toBase58String(asset))), 
  getIntegerValue(dAppAddress, (toBase58String(asset) + "_sRate")), 
  d16)
}

let ethinpool = getIntegerValue(Address(poolId), ("global_" + toBase58String(eth)) + "_balance")
let wavesinpool = getIntegerValue(Address(poolId), ("global_" + toBase58String(waves)) + "_balance")
let projectstake = getIntegerValue(Address(poolId), ("3PAkmJniMgnnAej5pYf2jFYkCbZow5pt9tr" + "_indexStaked"))
let totalstake = getIntegerValue(Address(poolId), ("global_poolToken_amount"))
let ethwaves = fraction(d8, wavesinpool, ethinpool)

func _loadInt (key_:String,default_:Int) = match getInteger(SWAVES_stake, key_) {
    case a: Int => 
        a
    case _ => 
        default_
}


func _loadBigInt (key_:String,default_:BigInt) = match getBinary(SWAVES_stake, key_) {
    case a: ByteVector => 
        toBigInt(a)
    case _ => 
        default_
}

let lastRate = _loadBigInt("LAST_RATE", toBigInt(1000000000000))
let currentRate = _loadBigInt("CURRENT_RATE", toBigInt(0))
let lastHeight = _loadInt("LAST_HEIGHT", 0)
let targetHeight = min([_loadInt("TARGET_HEIGHT", 0), height])
let lastRateUpdated = (lastRate + (currentRate * toBigInt((targetHeight - lastHeight))))
let baseAmount = toInt(fraction(toBigInt(assetBalance(WX_WAVES_EAST, swaves)), lastRateUpdated, toBigInt(1000000000000), FLOOR))

let wavesinWX = wavesBalance(WX_WAVES_EAST).regular + baseAmount
let eastinWX = assetBalance(WX_WAVES_EAST, east)
let waveseast = fraction(d8 * 100, eastinWX, wavesinWX)

let wavesinwhirlpool = getIntegerValue(Address(whirlpoolPoolId), ("global_" + toBase58String(waves)) + "_balance")
let projectstakewhirl = getIntegerValue(Address(whirlpoolPoolId), ("3PAkmJniMgnnAej5pYf2jFYkCbZow5pt9tr" + "_indexStaked"))
let totalstakewhirl = getIntegerValue(Address(whirlpoolPoolId), ("global_poolToken_amount"))

let stEASTinwaves = fraction(
  fraction(assetBalance(this, steast), 
  getIntegerValue(EAST_stake, "%s__rate"), 
  1000000000000, HALFEVEN) / 100, 
    d8,
    waveseast) * 100 

let EASTinstaking = fraction(assetBalance(this, steast), 
getIntegerValue(EAST_stake, "%s__rate"), 
1000000000000, HALFEVEN) / 100

let tvlinwaves = 
fraction(wavesinpool * 10, projectstake, totalstake) # surplus treasury BURN-XTN x PepeTeam
+ fraction(PL_value(PL_Main, eth), ethwaves, d8) # surplus treasury ETH Puzzle Lend main pool in wavelets
+ fraction(wavesinwhirlpool * 10, projectstakewhirl, totalstakewhirl) # surplus treasury WHIRLPOOL AMM
+ stEASTinwaves # surplus treasury EAST staking


let whirlpoolsupply = match assetInfo(whirlpool) {
    case asset:Asset => asset.quantity
    case _ => throw("Can't find asset")
  } 
let price = if (fraction(tvlinwaves + getIntegerValue(this, "surplus received in wavelets"), d8, whirlpoolsupply) + d8) >= getIntegerValue(this, "WHIRLPOOL issue price in wavelets") 
then (fraction(tvlinwaves + getIntegerValue(this, "surplus received in wavelets"), d8, whirlpoolsupply) + d8)
else getIntegerValue(this, "WHIRLPOOL issue price in wavelets")

@Callable(i)
func buyWHIRLPOOLwithWAVES() = 
#if (i.caller != this && i.caller != Address(base58'3PPCzX2doZ7agBNuGSKqjrbdXgGEtE7CpQ3')) then throw("smart contract under maintenance") else
{ 
  let pmt = i.payments[0].value()
  let surplus = fraction((price - d8), pmt.amount, d8)
  let amount = fraction(pmt.amount, d8, price)
  let supplyamount = (pmt.amount - surplus)/3
  if (pmt.assetId != unit) then {
    throw("attach WAVES token only")
  } else {
        strict SupplyWavesMainPool = invoke(Address(base58'3P4uA5etnZi4AmBabKinq2bMiWU8KcnHZdH'), "supply", [], [AttachedPayment(unit, supplyamount)])
        strict SupplyWavesWavesDefiPool = invoke(Address(base58'3P4DK5VzDwL3vfc5ahUEhtoe5ByZNyacJ3X'), "supply", [], [AttachedPayment(unit, supplyamount)])
        strict SupplyWavesLowCap = invoke(Address(base58'3PHpuQUPVUoR3AYzFeJzeWJfYLsLTmWssVH'), "supply", [], [AttachedPayment(unit, supplyamount)])
    [Reissue(whirlpool, amount, true),
    ScriptTransfer(i.caller, amount, whirlpool),
    IntegerEntry("WHIRLPOOL issue price in wavelets", price),
    IntegerEntry("total WAVES received in wavelets", pmt.amount + getIntegerValue(this, "total WAVES received in wavelets")), 
    IntegerEntry("surplus received in wavelets", surplus + getIntegerValue(this, "surplus received in wavelets")),
    IntegerEntry("wavelets received for treasury", amount - surplus + getIntegerValue(this, "wavelets received for treasury"))]
  }
}

@Callable(i)
func PriceSurplusSupply() = 
{
  [
  IntegerEntry("PL BT Main", PL_value(PL_Main, waves)),
  IntegerEntry("PL BT Defi", PL_value(PL_Defi, waves)),
  IntegerEntry("PL BT Low", PL_value(PL_Low, waves)),
  IntegerEntry("PL base treasury", PL_value(PL_Main, waves) + PL_value(PL_Defi, waves) + PL_value(PL_Low, waves)),
  IntegerEntry("surplus treasury BURN-XTN x PepeTeam in wavelets", fraction(wavesinpool * 10, projectstake, totalstake)),
  IntegerEntry("ETH Puzzle Lend main pool", PL_value(PL_Main, eth)),
  IntegerEntry("surplus treasury ETH Puzzle Lend main pool in wavelets", fraction(PL_value(PL_Main, eth), ethwaves, d8)),
  IntegerEntry("surplus treasury WHIRLPOOL AMM in wavelets", fraction(wavesinwhirlpool * 10, projectstakewhirl, totalstakewhirl)),
  IntegerEntry("ST EAST in staking", EASTinstaking),
  IntegerEntry("ST stEAST in waves", stEASTinwaves),
  IntegerEntry("Total surplus treasury value in wavelets", tvlinwaves),
  IntegerEntry("WHIRLPOOL issue price in wavelets", price),
  IntegerEntry("WHIRLPOOL total supply", whirlpoolsupply),
  IntegerEntry("total WAVES received in wavelets", getIntegerValue(this, "total WAVES received in wavelets")),
  IntegerEntry("surplus received in wavelets", getIntegerValue(this, "surplus received in wavelets")),
  IntegerEntry("wavelets received for treasury", getIntegerValue(this, "wavelets received for treasury")),
  IntegerEntry("total WAVES paid out in wavelets", getIntegerValue(this, "total WAVES paid out in wavelets")),
  IntegerEntry("ROI basis points", getIntegerValue(this, "ROI basis points"))
  ]
}

@Callable(i)
func PoolOneTokenSurplus() = if (i.caller != this) then throw("access only by project owner") else
{
let surplusamount = getIntegerValue(this, "surplus received in wavelets")
strict PoolOneTokenSurplus = invoke(Address(base58'3PR1Qvi9mHT35SwWEkLSqqE2L8thiPLdVWU'), "generateIndexWithOneTokenAndStake", [poolString],[AttachedPayment(unit, surplusamount)])
  [IntegerEntry("surplus received in wavelets", getIntegerValue(this, "surplus received in wavelets") - surplusamount)]
}

@Callable(i)
func BoostPoolAPY() = if (i.caller != this) then throw("access only by project owner") else
{
  strict wavesBalanceBefore = wavesBalance(this).available
  strict claim = invoke(Address(poolId), "claimIndexRewards", [], [])
  strict swapburnxtn = invoke(Address(poolId), "swap", ["WAVES",0], [AttachedPayment(burnxtnId,assetBalance(this, burnxtnId))])
  strict swapusdterc = invoke(Address(poolId), "swap", ["WAVES",0], [AttachedPayment(usdterc,assetBalance(this, usdterc))])
  strict swapusdtbsc = invoke(Address(poolId), "swap", ["WAVES",0], [AttachedPayment(usdtbsc,assetBalance(this, usdtbsc))])
  strict swapusdcerc = invoke(Address(poolId), "swap", ["WAVES",0], [AttachedPayment(usdcerc,assetBalance(this, usdcerc))])
  strict swapusdcbsc = invoke(Address(poolId), "swap", ["WAVES",0], [AttachedPayment(usdcbsc,assetBalance(this, usdcbsc))])
  strict swapeth = invoke(Address(poolId), "swap", ["WAVES",0], [AttachedPayment(eth,assetBalance(this, eth))])
  strict swapbnb = invoke(Address(poolId), "swap", ["WAVES",0], [AttachedPayment(bnb,assetBalance(this, bnb))])
  strict swapwbtc = invoke(Address(poolId), "swap", ["WAVES",0], [AttachedPayment(wbtc,assetBalance(this, wbtc))])
  strict swapbtcb = invoke(Address(poolId), "swap", ["WAVES",0], [AttachedPayment(btcb,assetBalance(this, btcb))])
  let wavesBalanceAfter = wavesBalance(this).available
  let wavesDifference = wavesBalanceAfter - wavesBalanceBefore
  let wavesAmountBoost = fraction(wavesDifference, 80, 100)
  let amountBoost = fraction(wavesDifference, 80, 100)
  let amountOwner = fraction(wavesDifference, 20, 100)
  strict boost = invoke(Address(poolboostSC), "addBoosting", [whirlpoolstring,7], [AttachedPayment(unit, amountBoost)])
  [ScriptTransfer(Address(projectowner), amountOwner, unit),
  IntegerEntry("total WAVES paid out in wavelets", wavesAmountBoost + getIntegerValue(this, "total WAVES paid out in wavelets")),
  IntegerEntry("ROI basis points", fraction(getIntegerValue(this, "total WAVES paid out in wavelets"), 10000, getIntegerValue(this, "total WAVES received in wavelets")))]
}

@Callable(i)
func BoostPoolAPYwETHmain() = if (i.caller != this) then throw("access only by project owner") else
{
  strict calculateTokenRates = invoke(PL_Main, "calculateTokenRates", [false], [])
  let withdrawamount = PL_value(PL_Main, eth) - tryGetInteger("ETH supplied")

  strict wavesBalanceBefore = wavesBalance(this).available
  strict withdraw = invoke((Address(base58'3P4uA5etnZi4AmBabKinq2bMiWU8KcnHZdH')), "withdraw", [toBase58String(eth),withdrawamount], [])
  strict swapeth = invoke(Address(poolId), "swap", ["WAVES",0], [AttachedPayment(eth,assetBalance(this, eth))])

  let wavesBalanceAfter = wavesBalance(this).available
  let wavesDifference = wavesBalanceAfter - wavesBalanceBefore
  let amountBoost = fraction(wavesDifference, 80, 100)
  let amountOwner = fraction(wavesDifference, 20, 100)
  strict boost = invoke(Address(poolboostSC), "addBoosting", [whirlpoolstring,7], [AttachedPayment(unit, amountBoost)])
  [ScriptTransfer(Address(projectowner), amountOwner, unit),
  IntegerEntry("total WAVES paid out in wavelets", amountBoost + getIntegerValue(this, "total WAVES paid out in wavelets")),
  IntegerEntry("ROI basis points", fraction(getIntegerValue(this, "total WAVES paid out in wavelets"), 10000, getIntegerValue(this, "total WAVES received in wavelets")))
]
}

@Callable(i)
func BoostPoolAPYwWhirlpool() = if (i.caller != this) then throw("access only by project owner") else
{
  strict wavesBalanceBefore = wavesBalance(this).available
  strict claim = invoke(Address(whirlpoolPoolId), "claimIndexRewards", [], [])
  strict swapwhirlpool = invoke(Address(whirlpoolPoolId), "swap", ["WAVES",0], [AttachedPayment(whirlpool,assetBalance(this, whirlpool))])
  let wavesBalanceAfter = wavesBalance(this).available
  let wavesDifference = wavesBalanceAfter - wavesBalanceBefore
  let wavesAmountBoost = fraction(wavesDifference, 80, 100)
  let amountBoost = fraction(wavesDifference, 80, 100)
  let amountOwner = fraction(wavesDifference, 20, 100)
  strict boost = invoke(Address(poolboostSC), "addBoosting", [whirlpoolstring,7], [AttachedPayment(unit, amountBoost)])
  [ScriptTransfer(Address(projectowner), amountOwner, unit),
  IntegerEntry("total WAVES paid out in wavelets", wavesAmountBoost + getIntegerValue(this, "total WAVES paid out in wavelets")),
  IntegerEntry("ROI basis points", fraction(getIntegerValue(this, "total WAVES paid out in wavelets"), 10000, getIntegerValue(this, "total WAVES received in wavelets")))]
}

@Callable(i)
func SupplyETHmain()= if (i.caller != this) then throw("access only by project owner") else
{
  let supplyamount = assetBalance(this, eth)
  strict SupplyETHmain = if supplyamount > 0 then invoke(Address(base58'3P4uA5etnZi4AmBabKinq2bMiWU8KcnHZdH'), "supply", [], [AttachedPayment(eth, supplyamount)]) else unit
  [IntegerEntry("ETH supplied", supplyamount + tryGetInteger("ETH supplied"))]
}

@Callable(i)
func withdrawWAVES_Main() = if (i.caller != this) then throw("access only by project owner") else
{
  let withdrawamountMain = PL_value(PL_Main, waves) - (getIntegerValue(this, "wavelets received for treasury") / 3)
  strict withdrawWM = invoke((PL_Main), "withdraw", [toBase58String(waves),withdrawamountMain], [])
  []
}

@Callable(i)
func withdrawWAVES_Defi() = if (i.caller != this) then throw("access only by project owner") else
{
  let withdrawamountDefi = PL_value(PL_Defi, waves) - (getIntegerValue(this, "wavelets received for treasury") / 3)
  strict withdrawWD = invoke((PL_Defi), "withdraw", [toBase58String(waves),withdrawamountDefi], [])
  []
}

@Callable(i)
func withdrawWAVES_Low() = if (i.caller != this) then throw("access only by project owner") else
{
  let withdrawamountLow = PL_value(PL_Low, waves) - (getIntegerValue(this, "wavelets received for treasury") / 3)
  strict withdrawWL = invoke((PL_Low), "withdraw", [toBase58String(waves),withdrawamountLow], [])
  []
}

@Callable(i)
func stakeEAST()= if (i.caller != this) then throw("access only by project owner") else
{
  let supplyamount = assetBalance(this, east)
  strict stakeEAST = if supplyamount > 0 then invoke((EAST_stake), "stake", [], [AttachedPayment(east, supplyamount)]) else unit
  [IntegerEntry("EAST staked", supplyamount + tryGetInteger("EAST staked"))]
}
